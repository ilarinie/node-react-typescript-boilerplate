{"version":3,"sources":["services/ApiService.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["LOGIN_STATE","token","localStorage","getItem","axios","defaults","headers","authorization","login","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","username","password","response","wrap","_context","prev","next","post","sent","setItem","abrupt","Promise","resolve","data","t0","reject","stop","_x","_x2","apply","this","arguments","checkLogin","_ref2","_callee2","_context2","get","App","_useState","useState","_useState2","slicedToArray","setUsername","_useState3","CHECKING_STATUS","_useState4","loginStatus","setLoginStatus","useEffect","check","user","LOGGED_IN","LOGGED_OUT","logIn","document","getElementById","value","react_default","createElement","className","id","onClick","removeItem","htmlFor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","URL","process","href","origin","addEventListener","concat","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.992f8081.chunk.js","sourcesContent":["import axios from 'axios';\nimport { User } from 'types';\n\nexport enum LOGIN_STATE {\n    CHECKING_STATUS,\n    LOGGED_OUT,\n    LOGGED_IN,\n}\n\nconst token = localStorage.getItem('token');\n\nif (token) {\n    axios.defaults.headers.authorization = token;\n}\n\nexport const login = async (username: string, password: string): Promise<any> => {\n    try {\n        const response = await axios.post('/api/login', { username, password });\n        axios.defaults.headers.authorization = response.headers.authorization;\n        localStorage.setItem('token', response.headers.authorization);\n        return Promise.resolve(response.data);\n    } catch (err) {\n        return Promise.reject();\n    }\n};\n\nexport const checkLogin = async (): Promise<User> => {\n    try {\n        const response = await axios.get('/api/loggedin');\n        return Promise.resolve(response.data);\n    } catch (err) {\n        return Promise.reject();\n    }\n};\n\nexport const logout = () => {\n    axios.defaults.headers.authorization = '';\n    localStorage.removeItem('token');\n};\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { login, LOGIN_STATE, checkLogin, logout } from './services/ApiService';\n\nconst App: React.FC = () => {\n    const [username, setUsername] = useState('');\n    const [loginStatus, setLoginStatus] = useState(LOGIN_STATE.CHECKING_STATUS);\n\n    useEffect(() => {\n        check();\n    }, [loginStatus]);\n\n    const check = async () => {\n        try {\n            const user = await checkLogin();\n            setUsername(user.username);\n            setLoginStatus(LOGIN_STATE.LOGGED_IN);\n        } catch (err) {\n            setLoginStatus(LOGIN_STATE.LOGGED_OUT);\n        }\n    };\n\n    const logIn = async () => {\n        try {\n            const response = await login(\n                (document.getElementById('username') as HTMLInputElement).value,\n                (document.getElementById('password') as HTMLInputElement).value,\n            );\n            setUsername(response.user.username);\n            setLoginStatus(LOGIN_STATE.LOGGED_IN);\n        } catch (err) {\n            setLoginStatus(LOGIN_STATE.LOGGED_OUT);\n        }\n    };\n\n    const handleLogout = () => {\n        logout();\n        setLoginStatus(LOGIN_STATE.LOGGED_OUT);\n        setUsername('');\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                {loginStatus === LOGIN_STATE.CHECKING_STATUS && <div>Loading...</div>}\n                {loginStatus === LOGIN_STATE.LOGGED_IN && (\n                    <div>\n                        <button id=\"logoutButton\" onClick={handleLogout}>\n                            Logout\n                        </button>\n                        <br />\n                        Logged in as\n                    </div>\n                )}\n                {loginStatus === LOGIN_STATE.LOGGED_OUT && (\n                    <div>\n                        <label htmlFor=\"username\">Username</label>\n                        <br />\n                        <input id=\"username\" />\n                        <br />\n                        <label htmlFor=\"password\">password</label>\n                        <br />\n                        <input id=\"password\" />\n                        <br />\n                        <button id=\"loginButton\" onClick={logIn}>\n                            Login\n                        </button>\n                    </div>\n                )}\n                {username}\n            </header>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}